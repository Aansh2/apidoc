<h2 id="velocity-setpoint">Velocity Setpoint</h2>

<blockquote>
<p>Definition</p>
</blockquote>

<aside class="warning">
This API is not supported for Fixed Wing.
</aside>
<pre class="highlight shell tab-shell"><code><span class="c"># API call described below requires shell access, either login to the device by connecting a monitor or use ssh for remote login.</span>

ROS-Service Name: /&lt;namespace&gt;/navigation/velocity
ROS-Service Type: core_api/VelocitySet, below is its description

<span class="c">#Request : expects velocity setpoint via vx,vy,vz</span>
<span class="c">#Request : expects yaw_rate setpoint via yaw_rate (send yaw_rate_valid=true)</span>
geometry_msgs/TwistStamped twist <span class="c">#deprecated, instead use vx,vy,vz,yaw_rate</span>
float32 vx
float32 vy
float32 vz
float32 yaw_rate
float32 tolerance
bool async
bool relative
bool yaw_rate_valid
bool body_frame

<span class="c">#Response : return success=true, (if async=false &amp;&amp; if setpoint reached before timeout = 30sec) || (if async=true &amp;&amp; command sent to autopilot)</span>
bool success
string message
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="c1">// C++ API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from C++.
</span>
<span class="n">Function</span> <span class="n">Definition</span><span class="o">:</span>  <span class="kt">int</span> <span class="n">Navigation</span><span class="o">::</span><span class="n">velocity_set</span><span class="p">(</span><span class="kt">float</span> <span class="n">vx</span><span class="p">,</span> <span class="kt">float</span> <span class="n">vy</span><span class="p">,</span> <span class="kt">float</span> <span class="n">vz</span><span class="p">,</span> <span class="kt">float</span> <span class="n">yaw_rate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">float</span> <span class="n">tolerance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">relative</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">async</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">yaw_rate_valid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">body_frame</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>

<span class="n">Arguments</span><span class="o">:</span>
    <span class="n">vx</span><span class="p">,</span><span class="n">vy</span><span class="p">,</span><span class="n">vz</span><span class="o">:</span> <span class="n">Velocity</span> <span class="n">Setpoint</span> <span class="n">in</span> <span class="n">NED</span><span class="o">-</span><span class="n">Frame</span> <span class="p">(</span><span class="n">in</span> <span class="n">body</span><span class="o">-</span><span class="n">frame</span> <span class="k">if</span> <span class="n">body_frame</span><span class="o">=</span><span class="nb">true</span><span class="p">)</span>
    <span class="n">yaw_rate</span><span class="o">:</span> <span class="n">Yaw_rate</span> <span class="n">Setpoint</span> <span class="n">in</span> <span class="n">radians</span><span class="o">/</span><span class="n">sec</span>
    <span class="n">yaw_rate_valid</span><span class="o">:</span> <span class="n">Must</span> <span class="n">be</span> <span class="n">set</span> <span class="n">to</span> <span class="nb">true</span><span class="p">,</span> <span class="k">if</span> <span class="n">yaw_rate</span> <span class="n">setpoint</span> <span class="n">is</span> <span class="n">provided</span>
    <span class="n">tolerance</span><span class="o">:</span> <span class="n">Acceptance</span> <span class="n">radius</span> <span class="n">in</span> <span class="n">meters</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="k">default</span> <span class="n">value</span><span class="o">=</span><span class="mf">1.0</span><span class="n">m</span><span class="o">/</span><span class="n">s</span>
    <span class="n">relative</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">velocity</span> <span class="n">setpoints</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">current</span> <span class="n">position</span> <span class="n">is</span> <span class="n">sent</span>
    <span class="n">async</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">asynchronous</span> <span class="n">mode</span> <span class="n">is</span> <span class="n">set</span>
    <span class="n">body_frame</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">velocity</span> <span class="n">setpoints</span> <span class="n">are</span> <span class="n">with</span> <span class="n">respect</span> <span class="n">to</span> <span class="n">body</span> <span class="n">frame</span>

<span class="n">Returns</span><span class="o">:</span> <span class="n">For</span> <span class="n">async</span><span class="o">=</span><span class="nb">true</span><span class="p">,</span> <span class="n">returns</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">the</span> <span class="n">command</span> <span class="n">is</span> <span class="n">successfully</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">the</span> <span class="n">vehicle</span><span class="p">,</span> <span class="k">else</span> <span class="n">returns</span> <span class="mf">1.</span> <span class="n">For</span> <span class="n">async</span><span class="o">=</span><span class="nb">false</span><span class="p">,</span> <span class="n">returns</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">the</span> <span class="n">vehicle</span> <span class="n">reaches</span> <span class="n">given</span> <span class="n">setpoint</span> <span class="n">before</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="n">secs</span><span class="p">,</span> <span class="k">else</span> <span class="n">returns</span> <span class="mf">1.</span>
</code></pre><pre class="highlight python tab-python"><code><span class="c"># Python API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from Python.</span>

<span class="n">Class</span><span class="p">:</span> <span class="n">flyt_python</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">navigation</span>

<span class="n">Function</span><span class="p">:</span> <span class="n">velocity_set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">vx</span><span class="p">,</span> <span class="n">vy</span><span class="p">,</span> <span class="n">vz</span><span class="p">,</span> <span class="n">yaw_rate</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">tolerance</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">relative</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">async</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yaw_rate_valid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">body_frame</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>

</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="c1">// ROS services and topics are accessible from onboard scripts only.
</span>
<span class="n">Type</span><span class="o">:</span> <span class="n">Ros</span> <span class="n">Service</span>
<span class="n">Name</span><span class="o">:</span> <span class="o">/&lt;</span><span class="k">namespace</span><span class="o">&gt;/</span><span class="n">navigation</span><span class="o">/</span><span class="n">velocity_set</span>
<span class="n">call</span> <span class="n">srv</span><span class="o">:</span>
        <span class="o">:</span><span class="kt">float</span> <span class="n">vx</span>
        <span class="o">:</span><span class="kt">float</span> <span class="n">vy</span>
        <span class="o">:</span><span class="kt">float</span> <span class="n">vz</span>
        <span class="o">:</span><span class="kt">float</span> <span class="n">yaw_rate</span>
        <span class="o">:</span><span class="kt">float</span> <span class="n">tolerance</span>
        <span class="o">:</span><span class="kt">bool</span> <span class="n">async</span>
        <span class="o">:</span><span class="kt">bool</span> <span class="n">relative</span>
        <span class="o">:</span><span class="kt">bool</span> <span class="n">yaw_rate_valid</span>
        <span class="o">:</span><span class="kt">bool</span> <span class="n">body_frame</span>
<span class="n">response</span> <span class="n">srv</span><span class="o">:</span> 
    <span class="o">:</span><span class="kt">bool</span> <span class="n">success</span>
    <span class="o">:</span><span class="n">string</span> <span class="n">message</span>
</code></pre><pre class="highlight python tab-python--ros"><code><span class="c"># ROS services and topics are accessible from onboard scripts only.</span>

<span class="n">Type</span><span class="p">:</span> <span class="n">Ros</span> <span class="n">Service</span>
<span class="n">Name</span><span class="p">:</span> <span class="o">/&lt;</span><span class="n">namespace</span><span class="o">&gt;/</span><span class="n">navigation</span><span class="o">/</span><span class="n">velocity_set</span>
<span class="n">call</span> <span class="n">srv</span><span class="p">:</span>
        <span class="p">:</span><span class="nb">float</span> <span class="n">vx</span>
        <span class="p">:</span><span class="nb">float</span> <span class="n">vy</span>
        <span class="p">:</span><span class="nb">float</span> <span class="n">vz</span>
        <span class="p">:</span><span class="nb">float</span> <span class="n">yaw_rate</span>
        <span class="p">:</span><span class="nb">float</span> <span class="n">tolerance</span>
    <span class="p">:</span><span class="nb">bool</span> <span class="n">async</span>
    <span class="p">:</span><span class="nb">bool</span> <span class="n">relative</span>
    <span class="p">:</span><span class="nb">bool</span> <span class="n">yaw_rate_valid</span>
    <span class="p">:</span><span class="nb">bool</span> <span class="n">body_frame</span>
<span class="n">response</span> <span class="n">srv</span><span class="p">:</span> 
    <span class="p">:</span><span class="nb">bool</span> <span class="n">success</span>
    <span class="p">:</span><span class="n">string</span> <span class="n">message</span>

</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">REST</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span> <span class="nx">to</span> <span class="nx">give</span> <span class="nx">velocity</span> <span class="nx">setpoints</span><span class="p">.</span>
 <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">to</span> <span class="nx">replace</span> 
    <span class="nx">ip</span><span class="p">:</span> <span class="nx">ip</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span>
    <span class="nl">namespace</span><span class="p">:</span> <span class="nx">namespace</span> <span class="nx">used</span> <span class="nx">by</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">device</span><span class="p">.</span>

<span class="nl">URL</span><span class="p">:</span> <span class="s1">'http://&lt;ip&gt;/ros/&lt;namespace&gt;/navigation/velocity_set'</span>

<span class="nx">JSON</span> <span class="nx">Request</span><span class="p">:</span>
<span class="p">{</span>   
    <span class="nl">vx</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">vy</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">vz</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">yaw_rate</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">tolerance</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">async</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">relative</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">yaw_rate_valid</span> <span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">body_frame</span> <span class="p">:</span> <span class="nb">Boolean</span> <span class="p">}</span>

<span class="nx">JSON</span> <span class="nx">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="p">}</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">Websocket</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span> <span class="nx">to</span> <span class="nx">give</span> <span class="nx">velocity</span> <span class="nx">setpoints</span><span class="p">.</span>
 <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">you</span> <span class="nx">initialise</span> <span class="nx">the</span> <span class="nx">websocket</span> <span class="nx">using</span> <span class="nx">websocket</span> <span class="nx">initialising</span> 
<span class="nx">API</span> <span class="nx">and</span> <span class="nx">replace</span> <span class="nx">namespace</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">namespace</span> <span class="nx">of</span> 
<span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span> <span class="nx">before</span> <span class="nx">calling</span> <span class="nx">the</span> <span class="nx">API</span> 
<span class="kd">with</span> <span class="nx">websocket</span><span class="p">.</span>

<span class="nl">name</span><span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/navigation/velocity_set'</span><span class="p">,</span>
<span class="nx">serviceType</span><span class="p">:</span> <span class="s1">'core_api/VelocitySet'</span>

<span class="nl">Request</span><span class="p">:</span>
<span class="p">{</span>       
    <span class="nl">vx</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">vy</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">vz</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">yaw_rate</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">tolerance</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">async</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">relative</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">yaw_valid</span> <span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">body_frame</span> <span class="p">:</span> <span class="nb">Boolean</span> <span class="p">}</span>

<span class="nl">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="nx">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="p">}</span>


</code></pre>
<blockquote>
<p>Example</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>rosservice call /flytpod/navigation/velocity_set <span class="s2">"{vx: 0.5, vy: 0.2, vz: -0.1, yaw_rate: 0.1, tolerance: 0.0, async: false, relative: false, yaw_rate_valid: true, body_frame: false}"</span>          

<span class="c">#sends (vx,vy,vz)=(0.5,0.2,-0.1)(m/s), yaw_rate=0.1rad/s,  relative=false, async=false, yaw_rate_valid=true, body_frame=false</span>
<span class="c">#default value of tolerance=1.0m/s if left at 0  </span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="cp">#include &lt;cpp_api/navigation_bridge.h&gt;
</span>
<span class="n">Navigation</span> <span class="n">nav</span><span class="p">;</span>
<span class="n">nav</span><span class="p">.</span><span class="n">velocity_set</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.12</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
<span class="c1">//sends (vx,vy,vz)=(1.0,0.5,-1.0)(m/s), yaw_rate=0.12rad/s, tolerance=0.5m/s, relative=false, async=false, yaw_rate_valid=true, body_frame=false
</span></code></pre><pre class="highlight python tab-python"><code><span class="c"># create flyt_python navigation class instance</span>
<span class="kn">from</span> <span class="nn">flyt_python</span> <span class="kn">import</span> <span class="n">api</span>
<span class="n">drone</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">navigation</span><span class="p">()</span>
<span class="c"># wait for interface to initialize</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">3.0</span><span class="p">)</span>

<span class="c"># fly towards right ( with respect to vehicle current heading) </span>
<span class="n">drone</span><span class="o">.</span><span class="n">velocity_set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">body_frame</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="cp">#include &lt;core_api/PositionSet.h&gt;
</span>
<span class="n">ros</span><span class="o">::</span><span class="n">NodeHandle</span> <span class="n">nh</span><span class="p">;</span>
<span class="n">ros</span><span class="o">::</span><span class="n">ServiceClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">nh</span><span class="p">.</span><span class="n">serviceClient</span><span class="o">&lt;</span><span class="n">core_api</span><span class="o">::</span><span class="n">PositionSet</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"/&lt;namespace&gt;/navigation/position_set"</span><span class="p">);</span>
<span class="n">core_api</span><span class="o">::</span><span class="n">PositionSet</span> <span class="n">srv</span><span class="p">;</span>

<span class="n">srv</span><span class="p">.</span><span class="n">vx</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">vy</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">vz</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">yaw_rate</span> <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">tolerance</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">async</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">yaw_rate_valid</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">relative</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">body_frame</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="n">client</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="n">srv</span><span class="p">);</span>
<span class="kt">bool</span> <span class="n">success</span> <span class="o">=</span> <span class="n">srv</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="n">srv</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">message</span><span class="p">;</span>

<span class="c1">//sends (vx,vy,vz)=(1.0,0.5,-1.0)(m/s), yaw_rate=0.12rad/s, tolerance=0.5m/s, relative=false, async=false, yaw_rate_valid=true, body_frame=false
</span></code></pre><pre class="highlight python tab-python--ros"><code><span class="kn">import</span> <span class="nn">rospy</span>
<span class="kn">from</span> <span class="nn">core_api.srv</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">setpoint_velocity</span><span class="p">(</span><span class="n">vx</span><span class="p">,</span> <span class="n">vy</span><span class="p">,</span> <span class="n">vz</span><span class="p">,</span> <span class="n">yaw_rate</span><span class="p">,</span> <span class="n">tolerance</span><span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">async</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">relative</span><span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">yaw_rate_valid</span><span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">body_frame</span><span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">wait_for_service</span><span class="p">(</span><span class="s">'/&lt;namespace&gt;/navigation/velocity_set'</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">handle</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceProxy</span><span class="p">(</span><span class="s">'/&lt;namespace&gt;/navigation/velocity_set'</span><span class="p">,</span> <span class="n">VelocitySet</span><span class="p">)</span>
        <span class="c"># build message structure</span>
        <span class="n">req_msg</span> <span class="o">=</span> <span class="n">VelocitySetRequest</span><span class="p">(</span><span class="n">vx</span><span class="o">=</span><span class="n">vx</span><span class="p">,</span> <span class="n">vy</span><span class="o">=</span><span class="n">vy</span><span class="p">,</span> <span class="n">vz</span><span class="o">=</span><span class="n">vz</span><span class="p">,</span> <span class="n">yaw_rate</span><span class="o">=</span><span class="n">yaw_rate</span><span class="p">,</span> <span class="n">tolerance</span><span class="o">=</span><span class="n">tolerance</span><span class="p">,</span> <span class="n">async</span><span class="o">=</span><span class="n">async</span><span class="p">,</span> <span class="n">relative</span><span class="o">=</span><span class="n">relative</span><span class="p">,</span> <span class="n">yaw_rate_valid</span><span class="o">=</span><span class="n">yaw_rate_valid</span><span class="p">,</span> <span class="n">body_frame</span><span class="o">=</span><span class="n">body_frame</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">req_msg</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">resp</span>
    <span class="k">except</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceException</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="o">.</span><span class="n">logerr</span><span class="p">(</span><span class="s">"vel set service call failed </span><span class="si">%</span><span class="s">s"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>

</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="kd">var</span>  <span class="nx">msgdata</span><span class="o">=</span><span class="p">{};</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"vx"</span><span class="p">]</span><span class="o">=</span><span class="mf">2.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"vy"</span><span class="p">]</span><span class="o">=</span><span class="mf">3.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"vz"</span><span class="p">]</span><span class="o">=-</span><span class="mf">1.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"yaw_rate"</span><span class="p">]</span><span class="o">=</span><span class="mf">1.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"tolerance"</span><span class="p">]</span><span class="o">=</span><span class="mf">2.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"async"</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"relative"</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"yaw_rate_valid"</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"body_frame"</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="s2">"POST"</span><span class="p">,</span>
    <span class="na">dataType</span><span class="p">:</span> <span class="s2">"json"</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msgdata</span><span class="p">),</span>
    <span class="na">url</span><span class="p">:</span> <span class="s2">"http://&lt;ip&gt;/ros/&lt;namespace&gt;/navigation/velocity_set"</span><span class="p">,</span>  
    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="kd">var</span> <span class="nx">velocitySet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">Service</span><span class="p">({</span>
    <span class="na">ros</span> <span class="p">:</span> <span class="nx">ros</span><span class="p">,</span>
    <span class="na">name</span> <span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/navigation/velocity_set'</span><span class="p">,</span>
    <span class="na">serviceType</span> <span class="p">:</span> <span class="s1">'core_api/VelocitySet'</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">ServiceRequest</span><span class="p">({</span>
    <span class="na">vx</span><span class="p">:</span> <span class="mf">2.00</span><span class="p">,</span>
    <span class="na">vy</span><span class="p">:</span> <span class="mf">3.00</span><span class="p">,</span>
    <span class="na">vz</span><span class="p">:</span> <span class="o">-</span><span class="mf">1.00</span><span class="p">,</span>
    <span class="na">yaw_rate</span><span class="p">:</span> <span class="mf">1.00</span><span class="p">,</span>
    <span class="na">tolerance</span><span class="p">:</span> <span class="mf">2.00</span><span class="p">,</span>
    <span class="na">async</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">relative</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">yaw_rate_valid</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">body_frame</span> <span class="p">:</span> <span class="kc">false</span>
<span class="p">});</span>

<span class="nx">velocitySet</span><span class="p">.</span><span class="nx">callService</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Result for service call on '</span>
      <span class="o">+</span> <span class="nx">velocitySet</span><span class="p">.</span><span class="nx">name</span>
      <span class="o">+</span> <span class="s1">': '</span>
      <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">success</span>
      <span class="o">+</span><span class="s1">': '</span>
      <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
<blockquote>
<p>Example response</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>success: <span class="nb">true</span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="mi">0</span>
</code></pre><pre class="highlight python tab-python"><code><span class="bp">True</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="nl">success:</span> <span class="n">True</span>
</code></pre><pre class="highlight python tab-python--ros"><code><span class="n">Success</span><span class="p">:</span> <span class="bp">True</span>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>

</code></pre>
<h3 id="description">Description:</h3>

<p>This API gives linear (vx,vy,vz) and angular (yaw_rate) velocity setpoint to vehicle. Please check API usage section below before using API.</p>

<h3 id="parameters">Parameters:</h3>

<p>Following parameters are applicable for onboard C++ and Python scripts. Scroll down for their counterparts in RESTful, Websocket, ROS. However the description of these parameters applies to all platforms. </p>

<p>Arguments:</p>

<table><thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>vx, vy, vz</td>
<td>float</td>
<td>Velocity Setpoint in NED-Frame (in body-frame if body_frame=true)</td>
</tr>
<tr>
<td>yaw_rate</td>
<td>float</td>
<td>Yaw rate Setpoint in rad/sec</td>
</tr>
<tr>
<td>yaw_rate_valid</td>
<td>bool</td>
<td>Must be set to true, if yaw</td>
</tr>
<tr>
<td>tolerance</td>
<td>float</td>
<td>Acceptance range in m/s, default value=1.0 m/s</td>
</tr>
<tr>
<td>relative</td>
<td>bool</td>
<td>If true, velocity setpoints relative to current position is sent</td>
</tr>
<tr>
<td>async</td>
<td>bool</td>
<td>If true, asynchronous mode is set</td>
</tr>
<tr>
<td>body_frame</td>
<td>bool</td>
<td>If true, velocity setpoints are relative with respect to body frame</td>
</tr>
</tbody></table>

<p>Output:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>success</td>
<td>bool</td>
<td>true if action successful</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>debug message</td>
</tr>
</tbody></table>

<h3 id="ros-endpoint">ROS endpoint:</h3>

<p>Navigation APIs in FlytOS are derived from / wrapped around the core navigation services in ROS. Onboard service clients in rospy / roscpp can call these APIs. Take a look at roscpp and rospy API definition for message structure. </p>

<ul>
<li>Type: Ros Service</br> </li>
<li>Name: /&lt;namespace&gt;/navigation/velocity_set</br></li>
<li>Service Type: core_api/VelocitySet</li>
</ul>

<h3 id="restful-endpoint">RESTful endpoint:</h3>

<p>FlytOS hosts a RESTful server which listens on port 80. RESTful APIs can be called from remote platform of your choice.</p>

<ul>
<li>URL: <code class="prettyprint">POST http://&lt;ip&gt;/ros/&lt;namespace&gt;/navigation/velocity_set</code></li>
<li>JSON Request:
{
vx: Float,
vy: Float,
vz: Float,
yaw_rate: Float,
tolerance: Float,
async: Boolean,
relative: Boolean,
yaw_rate_valid : Boolean,
body_frame : Boolean
}</li>
<li>JSON Response:
{
success: Boolean
message: String
}</li>
</ul>

<h3 id="websocket-endpoint">Websocket endpoint:</h3>

<p>Websocket APIs can be called from javascript using  <a href="https://github.com/RobotWebTools/roslibjs">roslibjs library.</a> 
Java websocket clients are supported using <a href="http://wiki.ros.org/rosjava">rosjava.</a></p>

<ul>
<li>name: &lsquo;/&lt;namespace&gt;/navigation/velocity_set&rsquo;</br></li>
<li>serviceType: &lsquo;core_api/VelocitySet&rsquo;</li>
</ul>

<h3 id="api-usage-information">API usage information:</h3>

<ul>
<li>Vehicle should be in GUIDED or OFFBOARD or API|POSCTL mode for this API to work.</li>
<li>Vehicle should be armed for this API to work.</li>
<li>Do not call this API when vehicle is grounded. Use take_off API first to get the vehicle in air.</li>
<li>vx,vy,vz are velocity setpoints in 3 linear axes. Yaw rate is rate of angular rotation around Z axis. Right hand notation is used to find positive yaw direction.</li>
<li>Effect of parameters:

<ul>
<li>Async:

<ul>
<li>True: The API call would return as soon as the command has been sent to the autopilot, irrespective of whether the vehicle has achieved the given velocity.</li>
<li>False: The API call would wait for the function to return, which happens when either the velocity setpoint is reached or timeout=30secs is over.</li>
</ul></li>
<li>Relative: 

<ul>
<li>True: All setpoints (vx,vy,vz, yaw_rate) are calculated relative to current velocity. E.g. if vehicle is already flying in X direction with 1 m/s and a velocity call is placed for 2 m/s with relative= True then vehicle velocity target will change to 1+2 = 3 m/s.</li>
<li>False: All setpoints (vx,vy,vz, yaw) are used as absolute velocity setpoints.<br></li>
</ul></li>
<li>Body_frame 

<ul>
<li>True: All the setpoints are converted to body frame. </li>
<li>Front of vehicle : +vx</li>
<li>Right of vehicle : +vy</li>
<li>Down: +vz</li>
<li>Yaw is calculated from front of vehicle. </li>
<li>False: All the setpoints are converted to local NED (North, East, Down) frame. Yaw is calculated from North. </li>
</ul></li>
</ul></li>
<li>Either body_frame or relative flag can be set to true at a time. If both are set then only body_frame is effective.</li>
<li>For yaw rate_ setpoint to be effective the yaw_rate_valid argument must be set to true.</li>
<li>This API overrides any previous mission / navigation API being carried out.</li>
<li>This API requires position lock. GPS, Optical Flow, VICON system can provide position data to vehicle.</li>
<li>To provide only Yaw_rate setpoint use this API with x,y,z arguments set to 0, relative=True, yaw_valid=True</li>
<li>Vehicle will keep flying in the direction specified by API if async= True. If async is False vehicle will stop after achieving target velocities in all directions. Make sure that you are handling such cases where vehicle might keep flying infinitely.</li>
<li>Following parameters need to be manually configured according to vehicle frame.

<ul>
<li>MPC_XY_VEL_MAX : Maximum horizontal velocity. For smaller and lighter this parameter could be set to value between 8 m/s to 15 m/s. For larger and heavier systems it is safer to set this value below 8 m/s.</li>
<li>MPC_Z_VEL_MAX : Maximum vertical velocity. For smaller and lighter this parameter could be set to value between 3 m/s to 10 m/s. For larger and heavier systems it is safer to set this value below 8 m/s.</li>
<li>In any case vehicle will not exceed these velocity limits. So velocity_set call with target velocity beyond these limits will never be returned successful in synchronous mode.</li>
</ul></li>
</ul>
