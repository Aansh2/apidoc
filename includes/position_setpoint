<h1 id="position-setpoint">Position Setpoint</h1>

<blockquote>
<p>Make sure to replace &lt;namespace&gt; with your FlytOS namespace.</p>
</blockquote>

<p>This API sends position setpoint command to the autopilot. Additionally, you can send yaw setpoint (yaw_valid flag must be set true) to the vehicle as well. Some abstract features have been added, such as tolerance/acceptance-radius, synchronous/asynchronous mode, sending setpoints relative to current position (relative flag must be set true), sending setpoints relative to current body frame (body_frame flag must be set true).
This command commands the vehicle to go to a specified location and hover. It overrides any previous mission being carried out and starts hovering.</p>
<pre class="highlight shell"><code>ROS-Service Name: /&lt;namespace&gt;/navigation/position_set
ROS-Service Type: core_api/PositionSet, below is its description

<span class="c">#Request : expects position setpoint via twist.twist.linear.x,linear.y,linear.z</span>
<span class="c">#Request : expects yaw setpoint via twist.twist.angular.z (send yaw_valid=true)</span>
geometry_msgs/TwistStamped twist
float32 tolerance
bool async
bool relative
bool yaw_valid
bool body_frame

<span class="c">#Response : success=true - (if async=false &amp;&amp; if setpoint reached before timeout = 30sec) || (if async=true)</span>
bool success
</code></pre><pre class="highlight cpp"><code><span class="n">Function</span> <span class="n">Definition</span><span class="o">:</span> <span class="kt">int</span> <span class="n">Navigation</span><span class="o">::</span><span class="n">position_set</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="n">z</span><span class="p">,</span> <span class="kt">float</span> <span class="n">yaw</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span> <span class="n">tolerance</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">relative</span><span class="o">=</span><span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">async</span><span class="o">=</span><span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">yaw_valid</span><span class="o">=</span><span class="nb">false</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">body_frame</span><span class="o">=</span><span class="nb">false</span><span class="p">)</span>
<span class="n">Arguments</span><span class="o">:</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="o">:</span> <span class="n">Position</span> <span class="n">Setpoint</span> <span class="n">in</span> <span class="n">NED</span><span class="o">-</span><span class="n">Frame</span> <span class="p">(</span><span class="n">in</span> <span class="n">body</span><span class="o">-</span><span class="n">frame</span> <span class="k">if</span> <span class="n">body_frame</span><span class="o">=</span><span class="nb">true</span><span class="p">)</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">yaw</span><span class="o">:</span> <span class="n">Yaw</span> <span class="n">Setpoint</span> <span class="n">in</span> <span class="n">radians</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">yaw_valid</span><span class="o">:</span> <span class="n">Must</span> <span class="n">be</span> <span class="n">set</span> <span class="n">to</span> <span class="nb">true</span><span class="p">,</span> <span class="k">if</span> <span class="n">yaw</span> <span class="n">setpoint</span> <span class="n">is</span> <span class="n">provided</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">tolerance</span><span class="o">:</span> <span class="n">Acceptance</span> <span class="n">radius</span> <span class="n">in</span> <span class="n">meters</span><span class="p">,</span> <span class="k">default</span> <span class="n">value</span><span class="o">=</span><span class="mf">1.0</span><span class="n">m</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">relative</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">position</span> <span class="n">setpoints</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">current</span> <span class="n">position</span> <span class="n">is</span> <span class="n">sent</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">async</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">asynchronous</span> <span class="n">mode</span> <span class="n">is</span> <span class="n">set</span>
    <span class="o">:</span><span class="n">param</span> <span class="n">body_frame</span><span class="o">:</span> <span class="n">If</span> <span class="nb">true</span><span class="p">,</span> <span class="n">position</span> <span class="n">setpoints</span> <span class="n">are</span> <span class="n">relative</span> <span class="n">with</span> <span class="n">respect</span> <span class="n">to</span> <span class="n">body</span> <span class="n">frame</span>
    <span class="o">:</span><span class="k">return</span><span class="o">:</span> <span class="n">For</span> <span class="n">async</span><span class="o">=</span><span class="nb">true</span><span class="p">,</span> <span class="n">returns</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">the</span> <span class="n">command</span> <span class="n">is</span> <span class="n">successfully</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">the</span> <span class="n">vehicle</span><span class="p">,</span> <span class="k">else</span> <span class="n">returns</span> <span class="mf">1.</span> <span class="n">For</span> <span class="n">async</span><span class="o">=</span><span class="nb">false</span><span class="p">,</span> <span class="n">returns</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">the</span> <span class="n">vehicle</span> <span class="n">reaches</span> <span class="n">given</span> <span class="n">setpoint</span> <span class="n">before</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="n">secs</span><span class="p">,</span> <span class="k">else</span> <span class="n">returns</span> <span class="mf">1.</span>
</code></pre><pre class="highlight apiblueprint"><code><span class="nv">FORMAT</span><span class="p">: </span><span class="s">1A</span>

<span class="gh"># Resource and Actions API</span>
This API example demonstrates how to define a resource with multiple actions.

<span class="gu">## API Blueprint</span>
<span class="p">+</span> <span class="nv">[Previous</span><span class="p">: </span><span class="s">The Simplest API](01.%20Simplest%20API.md)</span>
<span class="p">+</span> <span class="nv">[This</span><span class="p">: </span><span class="s">Raw API Blueprint](https://raw.github.com/apiaryio/api-blueprint/master/examples/02.%20Resource%20and%20Actions.md)</span>
<span class="p">+</span> <span class="nv">[Next</span><span class="p">: </span><span class="s">Named Resource and Actions](03.%20Named%20Resource%20and%20Actions.md)</span>

<span class="gh"># /message</span>
This is our <span class="nv">[resource](http</span><span class="p">:</span><span class="s">//www.w3.org/TR/di-gloss/#def-resource). It is</span>
defined by its
<span class="nv">[URI](http</span><span class="p">:</span><span class="s">//www.w3.org/TR/di-gloss/#def-uniform-resource-identifier) or, more</span>
precisely, by its <span class="p">[</span><span class="nv">URI Template</span><span class="p">](</span><span class="sx">http://tools.ietf.org/html/rfc6570</span><span class="p">)</span>.

This resource has no actions specified but we will fix that soon.

<span class="gu">## GET</span>
Here we define an action using the <span class="sb">`GET`</span> <span class="p">[</span><span class="nv">HTTP request method</span><span class="p">](</span><span class="sx">http://www.w3schools.com/tags/ref_httpmethods.asp</span><span class="p">)</span> for our resource <span class="sb">`/message`</span>.

As with every good action it should return a
<span class="nv">[response](http</span><span class="p">:</span><span class="s">//www.w3.org/TR/di-gloss/#def-http-response). A response always</span>
bears a status code. Code 200 is great as it means all is green. Responding
with some data can be a great idea as well so let's add a plain text message to
our response.
<span class="p">
+</span> Response 200 (text/plain)<span class="sb">

        Hello World!

</span><span class="gu">## PUT</span>
OK, let's add another action. This time to put new data to our resource
(essentially an update action). We will need to send something in a
<span class="nv">[request](http</span><span class="p">:</span><span class="s">//www.w3.org/TR/di-gloss/#def-http-request) and then send a</span>
response back confirming the posting was a success (_HTTP Status Code 204 ~
Resource updated successfully, no content is returned_).
<span class="p">
+</span> Request (text/plain)<span class="sb">

        All your base are belong to us.

</span><span class="p">+ </span><span class="k">Response</span><span class="m"> 204</span>
</code></pre>
<blockquote>
<p>Example API call</p>
</blockquote>
<pre class="highlight shell"><code>rosservice call /&lt;namespace&gt;/navigation/position_set <span class="s2">"twist:
  header:
    seq: 0
    stamp: {secs: 0, nsecs: 0}
    frame_id: ''
  twist:
    linear: {x: 1.0, y: 3.5, z: -5.0}
    angular: {x: 0.0, y: 0.0, z: 0.5}
tolerance: 0.0
async: false
relative: false
yaw_valid: true
body_frame: false"</span>

<span class="c">#sends (x,y,z)=(1.0,3.5,-5.0)(m), yaw=0.12rad, relative=false, async=false, yaw_valid=true, body_frame=false</span>
<span class="c">#default value of tolerance=1.0m if left at 0    </span>
</code></pre>
<blockquote>
<p>Example API Response</p>
</blockquote>
<pre class="highlight shell"><code>success: <span class="nb">true</span>
</code></pre>