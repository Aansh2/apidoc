<h2 id="gimbal-control">Gimbal Control</h2>

<blockquote>
<p>Definition</p>
</blockquote>
<pre class="highlight shell tab-shell"><code><span class="c"># API call described below requires shell access, either login to the device using desktop or use ssh for remote login.</span>

ROS-Service Name: /&lt;namespace&gt;/payload/gimbal_set
ROS-Service Type: core_api/GimbalSet, below is its description

<span class="c">#Request : expects gimbal attitude setpoint in radians via roll, pitch, yaw in NED Frame</span>
<span class="c">#Response : return success=true if command is successfully sent</span>

float64 roll
float64 pitch
float64 yaw
---
bool success
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="c1">// C++ API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from C++.
</span>
<span class="n">NotImplemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="c"># Python API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from Python.</span>

<span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="c1">// ROS services and topics are accessible from onboard scripts only.
</span>
<span class="n">Type</span><span class="o">:</span> <span class="n">Ros</span> <span class="n">Service</span>
<span class="n">Name</span><span class="o">:</span> <span class="o">/&lt;</span><span class="k">namespace</span><span class="o">&gt;/</span><span class="n">payload</span><span class="o">/</span><span class="n">gimbal_set</span><span class="p">()</span>
<span class="n">call</span> <span class="n">srv</span><span class="o">:</span>
    <span class="o">:</span><span class="n">float64</span> <span class="n">roll</span>
    <span class="o">:</span><span class="n">float64</span> <span class="n">pitch</span>
    <span class="o">:</span><span class="n">float64</span> <span class="n">yaw</span>
<span class="n">response</span> <span class="n">srv</span><span class="o">:</span> <span class="kt">bool</span> <span class="n">success</span>
</code></pre><pre class="highlight python tab-python--ros"><code><span class="c"># ROS services and topics are accessible from onboard scripts only.</span>

<span class="n">Type</span><span class="p">:</span> <span class="n">Ros</span> <span class="n">Service</span>
<span class="n">Type</span><span class="p">:</span> <span class="n">Ros</span> <span class="n">Service</span>
<span class="n">Name</span><span class="p">:</span> <span class="o">/&lt;</span><span class="n">namespace</span><span class="o">&gt;/</span><span class="n">payload</span><span class="o">/</span><span class="n">gimbal_set</span><span class="p">()</span>
<span class="n">call</span> <span class="n">srv</span><span class="p">:</span>
    <span class="p">:</span><span class="n">float64</span> <span class="n">roll</span>
    <span class="p">:</span><span class="n">float64</span> <span class="n">pitch</span>
    <span class="p">:</span><span class="n">float64</span> <span class="n">yaw</span>
<span class="n">response</span> <span class="n">srv</span><span class="p">:</span> <span class="nb">bool</span> <span class="n">success</span>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">REST</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span><span class="p">.</span> <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">to</span> <span class="nx">replace</span> 
    <span class="nx">ip</span><span class="p">:</span> <span class="nx">ip</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span>
    <span class="nl">namespace</span><span class="p">:</span> <span class="nx">namespace</span> <span class="nx">used</span> <span class="nx">by</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">device</span><span class="p">.</span>

<span class="nl">URL</span><span class="p">:</span> <span class="s1">'http://&lt;ip&gt;/ros/&lt;namespace&gt;/payload/gimbal_set'</span>

<span class="nx">JSON</span> <span class="nx">Request</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">roll</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">pitch</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">yaw</span><span class="p">:</span> <span class="nx">Float</span>     <span class="p">}</span>

<span class="nx">JSON</span> <span class="nx">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">Websocket</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span><span class="p">.</span> <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">you</span> 
<span class="nx">initialise</span> <span class="nx">the</span> <span class="nx">websocket</span> <span class="nx">using</span> <span class="nx">websocket</span> <span class="nx">initialisng</span> 
<span class="nx">API</span> <span class="nx">and</span> <span class="nx">and</span> <span class="nx">replace</span> <span class="nx">namespace</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">namespace</span> <span class="nx">of</span> 
<span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span> <span class="nx">before</span> <span class="nx">calling</span> <span class="nx">the</span> <span class="nx">API</span> 
<span class="kd">with</span> <span class="nx">websocket</span><span class="p">.</span>

<span class="nl">name</span><span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/payload/gimbal_set'</span><span class="p">,</span>
<span class="nx">serviceType</span><span class="p">:</span> <span class="s1">'core_api/GimbalSet'</span>

<span class="nl">Request</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">roll</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">pitch</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">yaw</span><span class="p">:</span> <span class="nx">Float</span> <span class="p">}</span>

<span class="nl">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="p">}</span>
</code></pre>
<blockquote>
<p>Example</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>rosservice call /&lt;namespace&gt;/payload/gimbal_set <span class="s2">"roll: 0.0
pitch:0.5
yaw:-0.2"</span>

<span class="c">#sends (roll,pitch,yaw)=(0,0.5,-0.2)(rad)</span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="n">NotImplemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="cp">#include &lt;core_api/GimbalSet.h&gt;
</span>
<span class="n">ros</span><span class="o">::</span><span class="n">NodeHandle</span> <span class="n">nh</span><span class="p">;</span>
<span class="n">ros</span><span class="o">::</span><span class="n">ServiceClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">nh</span><span class="p">.</span><span class="n">serviceClient</span><span class="o">&lt;</span><span class="n">core_api</span><span class="o">::</span><span class="n">GimbalSet</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"/&lt;namespace&gt;/payload/gimbal_set"</span><span class="p">);</span>
<span class="n">core_api</span><span class="o">::</span><span class="n">GimbalSet</span> <span class="n">srv</span><span class="p">;</span>

<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">roll</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">pitch</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
<span class="n">srv</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">yaw</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">;</span>
<span class="n">client</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="n">srv</span><span class="p">);</span>
<span class="n">success</span> <span class="o">=</span> <span class="n">srv</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">;</span>
</code></pre><pre class="highlight python tab-python--ros"><code><span class="k">def</span> <span class="nf">setpoint_gimbal</span><span class="p">(</span><span class="n">roll</span><span class="p">,</span> <span class="n">pitch</span><span class="p">,</span> <span class="n">yaw</span><span class="p">):</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">wait_for_service</span><span class="p">(</span><span class="s">'&lt;namespace&gt;/payload/gimbal_set'</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">handle</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceProxy</span><span class="p">(</span><span class="s">'&lt;namespace&gt;/payload/gimbal_set'</span><span class="p">,</span> <span class="n">GimbalSet</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">roll</span><span class="p">,</span> <span class="n">pitch</span><span class="p">,</span> <span class="n">yaw</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">resp</span>
    <span class="k">except</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceException</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="o">.</span><span class="n">logerr</span><span class="p">(</span><span class="s">"gimbal_set service call failed </span><span class="si">%</span><span class="s">s"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span><span class="sb">``</span><span class="err">`</span>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="kd">var</span>  <span class="nx">msgdata</span><span class="o">=</span><span class="p">{};</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"roll"</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"pitch"</span><span class="p">]</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"yaw"</span><span class="p">]</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">;</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="s2">"POST"</span><span class="p">,</span>
    <span class="na">dataType</span><span class="p">:</span> <span class="s2">"json"</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msgdata</span><span class="p">),</span>
    <span class="na">url</span><span class="p">:</span> <span class="s2">"http://&lt;ip&gt;/ros/&lt;namespace&gt;/payload/gimbal_set"</span><span class="p">,</span>  
    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="kd">var</span> <span class="nx">gimbalSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">Service</span><span class="p">({</span>
    <span class="na">ros</span> <span class="p">:</span> <span class="nx">ros</span><span class="p">,</span>
    <span class="na">name</span> <span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/payload/gimbal_set'</span><span class="p">,</span>
    <span class="na">serviceType</span> <span class="p">:</span> <span class="s1">'core_api/GimbalSet'</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">ServiceRequest</span><span class="p">({</span>
    <span class="na">roll</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span>
    <span class="na">roll</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
    <span class="na">roll</span><span class="p">:</span> <span class="o">-</span><span class="mf">0.2</span>
<span class="p">});</span>

<span class="nx">gimbalSet</span><span class="p">.</span><span class="nx">callService</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Result for service call on '</span>
      <span class="o">+</span> <span class="nx">gimbalSet</span><span class="p">.</span><span class="nx">name</span>
      <span class="o">+</span> <span class="s1">': '</span>
      <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
<blockquote>
<p>Example response</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>success: <span class="nb">true</span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="n">NotImplemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="nl">success:</span> <span class="n">True</span>
</code></pre><pre class="highlight python tab-python--ros"><code><span class="n">Success</span><span class="p">:</span> <span class="bp">True</span>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>
</code></pre>
<h3 id="description">Description:</h3>

<p>This API sends gimbal attitude setpoint command to the autopilot via MAVLink and outputs pwm signals on gimbal-dedicated port of FlytPOD/Pixhawk. </p>

<h3 id="pre-requisites">Pre-requisites:</h3>

<p>For this API to work, autopilot must fulfill some pre-requisites first:</p>

<p>For FlytPOD/PRO users:</p>

<ul>
<li>Autopilot <strong>MUST</strong> be in <strong>ready-to-arm</strong> state. Typically it would be reflected by RGBled patterns marked by either blue-breathing or green-breathing. For more information about autopilot RGBled patterns refer to <a href="http://docs.flytbase.com/docs/FlytPOD/Hardware_specifications.html#rgb-led">this link</a>.</li>
<li>Make sure the parameter: <strong>MNT_MODE_IN</strong> is set to 3.</li>
</ul>

<p>For Pixhawk users:</p>

<ul>
<li>Make sure <strong>vmount</strong> driver gets started in rcS and variables <em>MIXER_AUX</em>, <em>PWM_AUX_OUT</em> and <em>PWM_AUX_RATE</em> are set to <em>mount</em>, <em>123456</em> and <em>50</em> respectively in rc.mc_defaults OR for strictly testing purposes one can set the parameter: <strong>SYS_AUTOSTART</strong> to 4002. For more information refer to <a href="https://dev.px4.io/advanced-gimbal-control.html">this guide by PX4</a>.</li>
<li>Autopilot <strong>MUST</strong> be in <strong>ready-to-arm</strong> state. Typically it would be reflected by RGBled patterns marked by either blue-breathing or green-breathing. For more information about autopilot RGBled patterns refer to <a href="https://pixhawk.org/users/status_leds">this link</a>.</li>
<li>Make sure the parameter: <strong>MNT_MODE_IN</strong> is set to 3.</li>
</ul>

<h3 id="parameters">Parameters:</h3>

<p>Following parameters are applicable for onboard C++ and Python scripts. Scroll down for their counterparts in RESTful, Websocket, ROS. However the description of these parameters applies to all platforms. </p>

<p>Arguments:</p>

<table><thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>roll</td>
<td>float</td>
<td>roll command to gimbal in radians</td>
</tr>
<tr>
<td>pitch</td>
<td>float</td>
<td>pitch command to gimbal in radians</td>
</tr>
<tr>
<td>yaw</td>
<td>float</td>
<td>yaw command to gimbal in radians</td>
</tr>
</tbody></table>

<p>Output:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>success</td>
<td>bool</td>
<td>true if action successful</td>
</tr>
</tbody></table>

<h3 id="ros-endpoint">ROS endpoint:</h3>

<p>Payload APIs in FlytOS are derived from / wrapped around the core services available in ROS. Onboard service clients in rospy / roscpp can call these APIs. Take a look at roscpp and rospy api definition for message structure. </p>

<ul>
<li>Type: Ros Service</br> </li>
<li>Name: /&lt;namespace&gt;/payload/gimbal_set</br></li>
<li>Service Type: GimbalSet</li>
</ul>

<h3 id="restful-endpoint">RESTful endpoint:</h3>

<p>FlytOS hosts a RESTful server which listens on port 80. RESTful APIs can be called from remote platform of your choice.</p>

<ul>
<li>URL: <code class="prettyprint">POST http://&lt;ip&gt;/ros/&lt;namespace&gt;/payload/gimbal_set</code></li>
<li>JSON Request:
{   roll: Float,
pitch: Float,
yaw: Float
}</li>
<li>JSON Response:
{
success: Boolean
}</li>
</ul>

<h3 id="websocket-endpoint">Websocket endpoint:</h3>

<p>Websocket APIs can be called from javascript using <a href="https://github.com/RobotWebTools/roslibjs">roslibjs library</a>.
Java websocket clients are supported using <a href="http://wiki.ros.org/rosjava">rosjava</a>.</p>

<ul>
<li>name: &lsquo;/&lt;namespace&gt;/payload/gimbal_set&rsquo;</br></li>
<li>serviceType: &lsquo;core_api/GimbalSet&rsquo;</li>
</ul>
