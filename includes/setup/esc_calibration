<h2 id="esc-calibration">ESC Calibration</h2>

<blockquote>
<p>Definition</p>
</blockquote>
<pre class="highlight shell tab-shell"><code><span class="c"># API call described below requires shell access, either login to the device by connecting a monitor or use ssh for remote login.</span>

ROS-Service Name: /&lt;namespace&gt;/setup/esc_calibration
ROS-Service Type: core_api/EscCalibration, below is its description
ReqStructure: 
    int8 CALIBRATION_STATE_SET_PWM_MAX <span class="o">=</span> 1
    int8 CALIBRATION_STATE_SET_PWM_MIN <span class="o">=</span> 2
    int8 CALIBRATION_STATE_CANCEL <span class="o">=</span> 3
    float32 pwm_min
    float32 pwm_max
    int8 num_of_actuators
    int8 calibration_state
    ---
    bool success

</code></pre><pre class="highlight cpp tab-cpp"><code><span class="c1">// C++ API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from C++.
</span>
<span class="n">Not</span> <span class="n">Implemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="c"># Python API described below can be used in onboard scripts only. For remote scripts you can use http client libraries to call FlytOS REST endpoints from Python.</span>

<span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="c1">// ROS services and topics are accessible from onboard scripts only.
</span>
<span class="n">ROS</span><span class="o">-</span><span class="n">Service</span> <span class="n">Name</span><span class="o">:</span> <span class="o">/&lt;</span><span class="k">namespace</span><span class="o">&gt;/</span><span class="n">setup</span><span class="o">/</span><span class="n">esc_calibration</span>
<span class="n">ROS</span><span class="o">-</span><span class="n">Service</span> <span class="n">Type</span><span class="o">:</span> <span class="n">core_api</span><span class="o">/</span><span class="n">EscCalibration</span><span class="p">,</span> <span class="n">below</span> <span class="n">is</span> <span class="n">its</span> <span class="n">description</span>
<span class="n">ReqStructure</span><span class="o">:</span> 
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_SET_PWM_MAX</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_SET_PWM_MIN</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_CANCEL</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">float32</span> <span class="n">pwm_min</span>
    <span class="n">float32</span> <span class="n">pwm_max</span>
    <span class="n">int8</span> <span class="n">num_of_actuators</span>
    <span class="n">int8</span> <span class="n">calibration_state</span>
    <span class="o">---</span>
    <span class="kt">bool</span> <span class="n">success</span>

</code></pre><pre class="highlight python tab-python--ros"><code><span class="c"># ROS services and topics are accessible from onboard scripts only.</span>

<span class="n">ROS</span><span class="o">-</span><span class="n">Service</span> <span class="n">Name</span><span class="p">:</span> <span class="o">/&lt;</span><span class="n">namespace</span><span class="o">&gt;/</span><span class="n">setup</span><span class="o">/</span><span class="n">esc_calibration</span>
<span class="n">ROS</span><span class="o">-</span><span class="n">Service</span> <span class="n">Type</span><span class="p">:</span> <span class="n">core_api</span><span class="o">/</span><span class="n">EscCalibration</span><span class="p">,</span> <span class="n">below</span> <span class="ow">is</span> <span class="n">its</span> <span class="n">description</span>
<span class="n">ReqStructure</span><span class="p">:</span> 
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_SET_PWM_MAX</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_SET_PWM_MIN</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">int8</span> <span class="n">CALIBRATION_STATE_CANCEL</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">float32</span> <span class="n">pwm_min</span>
    <span class="n">float32</span> <span class="n">pwm_max</span>
    <span class="n">int8</span> <span class="n">num_of_actuators</span>
    <span class="n">int8</span> <span class="n">calibration_state</span>
    <span class="o">---</span>
    <span class="nb">bool</span> <span class="n">success</span>

</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">REST</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span><span class="p">.</span> <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">to</span> <span class="nx">replace</span> 
    <span class="nx">ip</span><span class="p">:</span> <span class="nx">ip</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span>
    <span class="nl">namespace</span><span class="p">:</span> <span class="nx">namespace</span> <span class="nx">used</span> <span class="nx">by</span> <span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">device</span><span class="p">.</span>

<span class="nl">URL</span><span class="p">:</span> <span class="s1">'http://&lt;ip&gt;/ros/&lt;namespace&gt;/setup/esc_calibration'</span>

<span class="nx">JSON</span> <span class="nx">Request</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">pwm_min</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">pwm_max</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">num_of_actuators</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span>
    <span class="nx">calibration_state</span><span class="p">:</span> <span class="nx">Int</span> <span class="p">}</span>

<span class="nx">JSON</span> <span class="nx">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="p">}</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">Websocket</span> <span class="nx">call</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">API</span><span class="p">.</span> <span class="nx">Make</span> <span class="nx">sure</span> <span class="nx">you</span> 
<span class="nx">initialise</span> <span class="nx">the</span> <span class="nx">websocket</span> <span class="nx">using</span> <span class="nx">websocket</span> <span class="nx">initialisng</span> 
<span class="nx">API</span> <span class="nx">and</span> <span class="nx">and</span> <span class="nx">replace</span> <span class="nx">namespace</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">namespace</span> <span class="nx">of</span> 
<span class="nx">the</span> <span class="nx">FlytOS</span> <span class="nx">running</span> <span class="nx">device</span> <span class="nx">before</span> <span class="nx">calling</span> <span class="nx">the</span> <span class="nx">API</span> 
<span class="kd">with</span> <span class="nx">websocket</span><span class="p">.</span>

<span class="nl">name</span><span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/setup/esc_calibration'</span><span class="p">,</span>
<span class="nx">serviceType</span><span class="p">:</span> <span class="s1">'core_api/EscCalibration'</span>

<span class="nl">Request</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">pwm_min</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">pwm_max</span><span class="p">:</span> <span class="nx">Float</span><span class="p">,</span>
    <span class="nx">num_of_actuators</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span>
    <span class="nx">calibration_state</span><span class="p">:</span> <span class="nx">Int</span> <span class="p">}</span>

<span class="nl">Response</span><span class="p">:</span>
<span class="p">{</span>   <span class="nl">success</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="p">}</span>


</code></pre>
<blockquote>
<p>Example</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>
<span class="c"># Refer to rosservice command line api documentation for sample service calls. http://wiki.ros.org/rosservice</span>

</code></pre><pre class="highlight cpp tab-cpp"><code>
<span class="n">Not</span> <span class="n">Implemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code><span class="c1">// Please refer to Roscpp documentation for sample service clients. http://wiki.ros.org/ROS/Tutorials/WritingServiceClient(c%2B%2B)
</span></code></pre><pre class="highlight python tab-python--ros"><code><span class="c"># Please refer to Rospy documentation for sample service clients. http://wiki.ros.org/ROS/Tutorials/WritingServiceClient(python)</span>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="kd">var</span>  <span class="nx">msgdata</span><span class="o">=</span><span class="p">{};</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"pwm_min"</span><span class="p">]</span><span class="o">=</span><span class="mf">1000.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"pwm_max"</span><span class="p">]</span><span class="o">=</span><span class="mf">2000.00</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"num_of_actuators"</span><span class="p">]</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
<span class="nx">msgdata</span><span class="p">[</span><span class="s2">"calibration_state"</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="s2">"POST"</span><span class="p">,</span>
    <span class="na">dataType</span><span class="p">:</span> <span class="s2">"json"</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msgdata</span><span class="p">),</span>
    <span class="na">url</span><span class="p">:</span> <span class="s2">"http://&lt;ip&gt;/ros/&lt;namespace&gt;/setup/esc_calibration"</span><span class="p">,</span>  
    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="kd">var</span> <span class="nx">escCalibration</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">Service</span><span class="p">({</span>
    <span class="na">ros</span> <span class="p">:</span> <span class="nx">ros</span><span class="p">,</span>
    <span class="na">name</span> <span class="p">:</span> <span class="s1">'/&lt;namespace&gt;/setup/esc_calibration'</span><span class="p">,</span>
    <span class="na">serviceType</span> <span class="p">:</span> <span class="s1">'core_api/EscCalibration'</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ROSLIB</span><span class="p">.</span><span class="nx">ServiceRequest</span><span class="p">({</span>
    <span class="na">pwm_min</span><span class="p">:</span> <span class="mf">1000.00</span><span class="p">,</span>
    <span class="na">pwm_max</span><span class="p">:</span> <span class="mf">2000.00</span><span class="p">,</span>
    <span class="na">num_of_actuators</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="na">calibration_state</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">});</span>

<span class="nx">escCalibration</span><span class="p">.</span><span class="nx">callService</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Result for service call on '</span>
      <span class="o">+</span> <span class="nx">escCalibration</span><span class="p">.</span><span class="nx">name</span>
      <span class="o">+</span> <span class="s1">': '</span>
      <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
<blockquote>
<p>Example response</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>success: <span class="nb">true</span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="n">Not</span> <span class="n">Implemented</span>
</code></pre><pre class="highlight python tab-python"><code><span class="nb">NotImplemented</span>
</code></pre><pre class="highlight cpp tab-cpp--ros"><code>
</code></pre><pre class="highlight python tab-python--ros"><code>
</code></pre><pre class="highlight javascript tab-javascript--REST"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>

</code></pre><pre class="highlight javascript tab-javascript--Websocket"><code><span class="p">{</span>
    <span class="nl">success</span><span class="p">:</span><span class="nx">True</span>
<span class="p">}</span>

</code></pre>
<h3 id="description">Description:</h3>

<aside class="warning">
This API will ONLY work with FlytPOD/PRO.
</aside>

<p>This API helps calibrate ESCs.</p>

<h3 id="parameters">Parameters:</h3>

<p>Following parameters are applicable in RESTful, Websocket, ROS. However the description of these parameters applies to all platforms. </p>

<p>Arguments:</p>

<table><thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>pwm_min</td>
<td>float</td>
<td>Min PWM value to be expected</td>
</tr>
<tr>
<td>pwm_max</td>
<td>float</td>
<td>Max PWM value to be expected</td>
</tr>
<tr>
<td>num_of_actuators</td>
<td>Int</td>
<td>Number of actuator in the frame.</td>
</tr>
<tr>
<td>calibration_state</td>
<td>Int</td>
<td>1/2/3.</td>
</tr>
</tbody></table>

<p>Output:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>success</td>
<td>bool</td>
<td>true if action successful</td>
</tr>
</tbody></table>

<h3 id="ros-endpoint">ROS endpoint:</h3>

<p>APIs in FlytOS are derived from / wrapped around the core services in ROS. Onboard service clients in rospy / roscpp can call these APIs. Take a look at roscpp and rospy api definition for message structure. </p>

<ul>
<li>Type: Ros Service</br> </li>
<li>Name: /&lt;namespace&gt;/setup/esc_calibration</br></li>
<li>Service Type: EscCalibration</li>
</ul>

<h3 id="restful-endpoint">RESTful endpoint:</h3>

<p>FlytOS hosts a RESTful server which listens on port 80. RESTful APIs can be called from remote platform of your choice.</p>

<ul>
<li>URL: <code class="prettyprint">POST http://&lt;ip&gt;/ros/\&lt;namespace\&gt;/setup/esc_calibration</code></li>
<li>JSON Request:
{
pwm_min: Float,
pwm_max: Float,
num_of_actuators: Int,
calibration_state: Int
}</li>
<li>JSON Response:
{
success: Boolean
}</li>
</ul>

<h3 id="websocket-endpoint">Websocket endpoint:</h3>

<p>Websocket APIs can be called from javascript using  <a href="https://github.com/RobotWebTools/roslibjs">roslibjs library.</a> 
Java websocket clients are supported using <a href="http://wiki.ros.org/rosjava">rosjava.</a></p>

<ul>
<li>name: &lsquo;/&lt;namespace&gt;/setup/esc_calibration&rsquo;</br></li>
<li>serviceType: &lsquo;core_api/EscCalibration&rsquo;</li>
</ul>

<!-- ### API usage information:
Note: You can either set body_frame or relative flag. If both are set, body_frame takes precedence.

Tip: Asynchronous mode - The API call would return as soon as the command has been sent to the autopilot, irrespective of whether the vehicle has reached the given setpoint or not.

Tip: Synchronous mode - The API call would wait for the function to return, which happens when either the position setpoint is reached or timeout=30secs is over.
 -->
